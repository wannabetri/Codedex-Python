41. Countdown
# Create Your Own Module
As discussed in the previous exercise, modules are essentially .py files that contain statements and definitions.

Technically, all of the files that were created for the exercises up to this point could possibly be imported as a module!

For example, recall the math functions defined in a previous exercise.

If saved in a file called calculator.py, we could import it in a new file like so:

import calculator

For example, suppose we have another file called main.py, the functions from calculator.py (add(), subtract(), etc.) can be accessed and used with dot notation like so:

import calculator
import datetime
calculator.add(3, 4)       # 7
calculator.subtract(3, 4)  # -1
calculator.multiply(3, 4)  # 12
calculator.divide(3, 4)    # 0.75
calculator.exp(3, 4)       # 27

Note: The two files need to be in the same folder.

# datetime Module
Wait, what was that module? No, not calculator, the other one...

The datetime module specializes in dates and times. Just like random, the datetime module comes with Python by default and can simply be imported.

In addition to functions, modules may contain class object definitions with their own defined methods and properties.

The datetime module features a date object that accepts the following properties:

year: An integer between 1 and 9999.
month: An integer between 1 and 12.
day: An integer between 1 and the number of days in a given month/year.
The syntax for a date is datetime.date(year, month, day), like so:

import datetime
python_release_date = datetime.date(1991, 2, 20)
print(python_release_date)     # Output: 1991-02-20

The output shows the date object with a dash between each part. Also, any single number gets a leading zero 0.

The year, month, and day properties can be accessed like with any other class instance:

print(f'Python was released in {python_release_date.year}.')
# Output: Python was released in 1991.

The value of today's date is possible with the date.today() method:

datetime.date.today()

# Instructions
Let's use the datetime and random modules to make a birthday card to determine how far your birthday is from today! ðŸŽ‚

For this exercise, we are creating and using two .py files in a separate code editor.

Note: You can do this on VS Code! Check out this article to set up VS Code for Python.

## bday_messages.py
Create a new file called bday_messages.py.

Import the random module.

Then, define a bday_messages list with the following items:

'Hope you have a very Happy Birthday! ðŸŽˆ',
'It's your special day â€“ get out there and celebrate! ðŸŽ‰',
'You were born and the world got better â€“ everybody wins! Happy Birthday! ðŸ¥³',
'Have lots of fun on your special day! ðŸŽ‚',
'Another year of you going around the sun! ðŸŒž'
Next, use the random.choice() method to get a single item from the bday_messages list.

Save this item in a random_message variable.

Let's save bday_messages.py and move to the next part.

## main.py
Create a new file called main.py.

Import both the datetime module as well as bday_messages (the file that was just made).

import datetime, bday_messages

Next, use the datetime module to create two date objects:

today: Today's date, using the date.today() method.
my_next_birthday: The date for your next birthday, using the year, month, and day arguments.
A really cool thing you can do with date objects is addition and subtraction!
time_difference = date1 - date2

Use date subtraction to calculate how many days away today is from my_next_birthday. Then, assign the result to a new variable called days_away.

Then, create a control flow statement:

If today is equal to my_next_birthday, print the random_message variable (imported from bday_messages).
Else, print a message in the format 'My next birthday is _ days away from today!' (with the _ underscore being the number of days).
The expected output should look something like this:

My next birthday is 42 days away!

Hint
Bonus: Instead of something in the future, like a birthday, what if we tried to see how many days it's been since a past event, like the release date of your favorite movie or video game, or the date you were born? What about how many years?